name: CI Pipeline

on:
  push:
    branches: [ "main", 'dev' ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout


jobs:
  deploy:
      name: Deploy to ECS
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-ecs
            aws-region: ${{ vars.AWS_REGION }}

        - name: Login to Amazon ECR
          run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

        - name: Build, tag, and push Docker image to ECR
          id: build-image
          run: |
            docker build -t ${{ vars.ECR_IMAGE }} .
            docker tag ${{ vars.ECR_IMAGE }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:latest
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:latest
            echo "image=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT
        
        - name: Render Amazon ECS task definition
          id: render-trip-advisor-container
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: .aws/trip-adviser-revision3.json
            container-name: ${{ vars.ECS_CONTAINER }}
            image: ${{ steps.build-image.outputs.image }}
            environment-variables: "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}"
          
        - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ vars.ECS_SERVICE }}
              cluster: ${{ vars.ECS_CLUSTER }}
              wait-for-service-stability: true