name: CI Pipeline

on:
  push:
    branches: [ "main", 'dev' ]
  pr:
    branches: [ "main", 'dev' ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout


jobs:
  test:
    name: Run Tests and Docker Compose
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.8
        options: --privileged # Needed to run Docker inside Docker
        ports:
          - 80:80
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run Pytest
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pytest

      - name: Set up Docker Compose
        run: |
          docker compose up -d --build
          sleep 10 # Wait for services to be fully up
          docker compose down

      - name: Post Test Cleanup
        if: always()
        run: docker compose down
  
  deploy:
      name: Deploy to ECS
      runs-on: ubuntu-latest
      needs: test

      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::022499036788:role/github-ecs
            aws-region: ${{ vars.AWS_REGION }}

        - name: Login to Amazon ECR
          run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

        - name: Build, tag, and push Docker image
          run: |
            docker build -t ${{ vars.ECR_IMAGE }} .
            docker tag ${{ vars.ECR_IMAGE }}:latest ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_IMAGE }}:latest
            docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_IMAGE }}:latest