name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  ECR_IMAGE: ${{ vars.ECR_IMAGE }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
jobs:
  test:
    name: Run Tests and Docker Compose
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.8
        options: --privileged # Needed to run Docker inside Docker
        ports:
          - 8000:8000
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run Pytest
        env:
          OPENAI_API_KEY: $OPENAI_API_KEY
        run: |
          pytest

      - name: Set up Docker Compose
        run: |
          docker compose up -d --build
          sleep 10 # Wait for services to be fully up
          docker compose down

      - name: Post Test Cleanup
        if: always()
        run: docker compose down
  
  deploy:
      name: Deploy to ECS
      runs-on: ubuntu-latest
      needs: test

      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: $AWS_ACCESS_KEY_ID
            aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
            aws-region: $AWS_DEFAULT_REGION
        - name: Login to Amazon ECR
          run: aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

        - name: Build, tag, and push Docker image
          run: |
            docker build -t $ECR_IMAGE .
            docker tag $ECR_IMAGE:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_IMAGE:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_IMAGE:latest